import shutil
import os
from pathlib import Path
import sys
import pytest
import pandas as pd
from typing import List
import boto3
from moto import mock_s3
import io

sys.path.insert(1, "nesta_ds_utils/")
import file_ops


@pytest.fixture
def test_output_path():
    """Generates pathlib.Path to dump intermediate test data.

    Yields:
        Output path to dump intermetiate test data.
    """
    test_output_path = file_ops._convert_str_to_pathlib_path("tests/temp/")
    file_ops.make_path_if_not_exist(test_output_path)
    yield test_output_path
    shutil.rmtree("tests/temp/")


def test_convert_str_to_pathlib_path(test_output_path: Path):
    """Tests that file_ops method convert_str_to_pathlib_path.
        returns type patlib.Path.

    Args:
        test_output_path (pathlib.Path): output path to dump intermetiate test data
    """
    assert isinstance(test_output_path, Path)


def test_path_exists(test_output_path: Path):
    """Tests that the path generated by file_ops method
        make_path_if_not_exist exists.

    Args:
        test_output_path (pathlib.Path): Output path to dump intermetiate test data.
    """
    assert test_output_path.exists()


def test_extract_zip_to_output_path(test_output_path: Path):
    """Tests that the file_ops method extractall dumped a
        text file to an output path and that text file could be read.

    Args:
        test_output_path (pathlib.Path): Output path to dump intermetiate test data.
    """
    file_ops.extractall(
        "tests/artifacts/dummy_zip.zip", test_output_path, delete_zip=False
    )

    with open("tests/temp/dummy_text_in_zip.txt", "r") as f:
        text = f.read()
        assert text == "'Hello World'"


def test_extract_zip_no_output_path():
    """Tests that the file_ops method extractall dumped a
    text file to the directory of the zip file.
    """
    file_ops.extractall("tests/artifacts/dummy_zip.zip", delete_zip=False)

    with open("tests/artifacts/dummy_text_in_zip.txt", "r") as f:
        text = f.read()
        assert text == "'Hello World'"

    os.remove("tests/artifacts/dummy_text_in_zip.txt")


def test_zip_not_deleted():
    """Tests that the zip file was not deleted when extractall
    was called without a delete_zip flag.
    """
    assert file_ops._convert_str_to_pathlib_path(
        "tests/artifacts/dummy_zip.zip"
    ).exists()


@mock_s3
def test_get_bucket_filenames_s3():
    """Test that get_bucket_filenames_s3 returns a list containing dummy.csv."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="mybucket")
    s3 = boto3.client("s3")
    s3.upload_fileobj(io.BytesIO(b"Test"), "mybucket", "dummy.csv")
    assert file_ops.get_bucket_filenames_s3("mybucket", "") == ["dummy.csv"]


@mock_s3
def test_upload_obj_exception():
    """Tests that upload_obj rasies an Exception for unsupported file type."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="mybucket")
    with pytest.raises(Exception):
        file_ops.upload_obj(0, "mybucket", "dummy.csv")


def test_fileobj_to_df_exception():
    """Tests that _fileobj_to_df rasies an Exception for unsupported file type."""
    with pytest.raises(Exception):
        file_ops._fileobj_to_df(io.BytesIO(b"Test"), "dummy.txt")


def test_fileobj_to_df_csv():
    """Tests that _fileobj_to_df returns a pd.DataFrame with file type 'csv'."""
    assert isinstance(
        file_ops._fileobj_to_df(io.BytesIO(b"Test"), "dummy.csv"), pd.DataFrame
    )


def test_fileobj_to_df_json():
    """Tests that _fileobj_to_df returns a pd.DataFrame with file type 'json'."""
    buffer = io.BytesIO()
    pd.DataFrame({"c": [0]}).to_json(buffer)
    buffer.seek(0)
    assert isinstance(file_ops._fileobj_to_df(buffer, "dummy.json"), pd.DataFrame)


def test_fileobj_to_df_pkl():
    """Tests that _fileobj_to_df returns a pd.DataFrame with file type 'pkl'."""
    buffer = io.BytesIO()
    pd.DataFrame({"c": [0]}).to_pickle(buffer)
    buffer.seek(0)
    assert isinstance(file_ops._fileobj_to_df(buffer, "dummy.pkl"), pd.DataFrame)


def test_fileobj_to_df_xml():
    """Tests that _fileobj_to_df returns a pd.DataFrame with file type 'xml'."""
    buffer = io.BytesIO()
    pd.DataFrame({"c": [0]}).to_xml(buffer)
    buffer.seek(0)
    assert isinstance(file_ops._fileobj_to_df(buffer, "dummy.xml"), pd.DataFrame)


def test_df_to_fileobj_exception():
    """Tests that _df_to_fileobj rasies an Exception for unsupported file type."""
    with pytest.raises(Exception):
        file_ops._df_to_fileobj(pd.DataFrame(), "dummy.txt")


def test_df_to_fileobj_csv():
    """Tests that _df_to_fileobj returns a io.BytesIO with file type 'csv'."""
    assert isinstance(
        file_ops._df_to_fileobj(pd.DataFrame({"c": [0]}), "dummy.csv"), io.BytesIO
    )


def test_df_to_fileobj_json():
    """Tests that _df_to_fileobj returns a io.BytesIO with file type 'json'."""
    assert isinstance(
        file_ops._df_to_fileobj(pd.DataFrame({"c": [0]}), "dummy.json"), io.BytesIO
    )


def test_df_to_fileobj_pkl():
    """Tests that _df_to_fileobj returns a io.BytesIO with file type 'pkl'."""
    assert isinstance(
        file_ops._df_to_fileobj(pd.DataFrame({"c": [0]}), "dummy.pkl"), io.BytesIO
    )


def test_df_to_fileobj_xml():
    """Tests that _df_to_fileobj returns a io.BytesIO with file type 'xml'."""
    assert isinstance(
        file_ops._df_to_fileobj(pd.DataFrame({"c": [0]}), "dummy.xml"), io.BytesIO
    )


@mock_s3
def test_download_obj_fieobj():
    """Tests that download_obj returns a bytes file object."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="test-bucket")
    s3 = boto3.client("s3")
    s3.upload_fileobj(io.BytesIO(b"Test"), "test-bucket", "dummy.csv")
    assert isinstance(file_ops.download_obj("test-bucket", "dummy.csv"), io.BytesIO)


@mock_s3
def test_download_obj_dataframe():
    """Tests that download_obj returns a pandas pd.DataFrame."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="test-bucket")
    s3 = boto3.client("s3")
    s3.upload_fileobj(io.BytesIO(b"Test"), "test-bucket", "dummy.csv")
    assert isinstance(
        file_ops.download_obj("test-bucket", "dummy.csv", asDataFrame=True),
        pd.DataFrame,
    )


@mock_s3
def test_download_file():
    """Tests that download_file download mock txt file."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="test-bucket")
    s3 = boto3.client("s3")
    s3.upload_fileobj(io.BytesIO(b"Test"), "test-bucket", "dummy.csv")
    file_ops.download_file("dummy.csv", "test-bucket", "tests/temp/dummy.csv")
    with open("tests/temp/dummy.csv", "r") as f:
        text = f.read()
        assert text == "Test"
    shutil.rmtree("tests/temp/")


@mock_s3
def test_upload_file():
    """Tests that upload_file upload mock txt file."""
    conn = boto3.resource("s3", region_name="us-east-1")
    conn.create_bucket(Bucket="test-bucket")
    s3 = boto3.client("s3")
    file_ops.upload_file("tests/artifacts/dummy.txt", "test-bucket", "dummy.csv")
    Path("tests/temp/").mkdir(parents=True)
    s3.download_file("test-bucket", "dummy.csv", "tests/temp/dummy.csv")
    with open("tests/temp/dummy.csv", "r") as f:
        text = f.read()
        assert text == "Test"
    shutil.rmtree("tests/temp/")
